using System.Collections.Immutable;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis;

namespace Minerals.AutoMixins
{
    [Generator]
    public class AddMixinGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var generates = context.SyntaxProvider.ForAttributeWithMetadataName
            (
               "Minerals.AutoMixins.GenerateMixinAttribute",
               static (x, _) => x is TypeDeclarationSyntax,
               static (x, _) => new GenerateMixinObject(x)
            );

            var adds = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                "Minerals.AutoMixins.AddMixinAttribute",
                static (x, _) => x is TypeDeclarationSyntax,
                static (x, _) => new AddMixinObject(x)
            );

            var combined = adds.Combine(generates.Collect());
            context.RegisterSourceOutput(combined, static (ctx, element) =>
            {
                string fileName = $"{element.Left.Name}.g.cs";
                ctx.AddSource(fileName, GeneratePartialClass(element.Left, element.Right));
            });
        }

        private static SourceText GeneratePartialClass(AddMixinObject addObj, ImmutableArray<GenerateMixinObject> generateObjs)
        {
            var builder = new CodeBuilder();
            builder.AddAutoGeneratedHeader(Assembly.GetExecutingAssembly());
            AppendUsings(builder, addObj, generateObjs);
            AppendNamespace(builder, addObj);

            builder.AddAutoGeneratedAttributes(typeof(ClassDeclarationSyntax));
            AppendPartialClass(builder, addObj);
            AppendMembers(builder, addObj, generateObjs);
            builder.CloseAllBlocks();

            return SourceText.From(builder.ToString(), Encoding.UTF8);
        }

        private static void AppendUsings(CodeBuilder builder, AddMixinObject addObj, ImmutableArray<GenerateMixinObject> generateObjs)
        {
            HashSet<string> usings = [];
            foreach (var obj in generateObjs)
            {
                foreach (var item in obj.Usings)
                {
                    usings.Add(item);
                }
                if (obj.Namespace != string.Empty && obj.Namespace != addObj.Namespace)
                {
                    usings.Add(obj.Namespace);
                }
            }
            builder.WriteIteration(usings, (builder1, item, next) =>
            {
                builder1.WriteLine("using ").Write(item).Write(";");
            });
            builder.NewLine();
        }

        private static void AppendNamespace(CodeBuilder builder, AddMixinObject addObj)
        {
            if (addObj.Namespace != string.Empty)
            {
                builder.WriteLine("namespace ").Write(addObj.Namespace).OpenBlock();
            }
        }

        private static void AppendPartialClass(CodeBuilder builder, AddMixinObject addObj)
        {
            builder.NewLine().WriteIteration(addObj.Modifiers, (builder, item, next) =>
            {
                builder.Write(item).Write(" ");
            });
            builder.Write("class ").Write(addObj.Name);
            if (addObj.Base != string.Empty)
            {
                builder.Write(" : ").Write(addObj.Base);
            }
            builder.OpenBlock();
        }

        private static void AppendMembers(CodeBuilder builder, AddMixinObject addObj, ImmutableArray<GenerateMixinObject> generateObjs)
        {
            var selected = generateObjs.Where(x =>
            {
                return addObj.Mixins.Any(y =>
                {
                    return SymbolEqualityComparer.Default.Equals(y, x.Symbol);
                });
            });

            foreach (var obj in selected)
            {
                builder.WriteLine("// MixinType: ").Write(obj.Name);
                foreach (var member in obj.Members)
                {
                    builder.WriteLine(member.ToString());
                }
            }
        }
    }
}